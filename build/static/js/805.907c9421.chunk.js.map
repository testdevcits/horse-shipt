{"version":3,"file":"static/js/805.907c9421.chunk.js","mappings":"uMAKA,MAyEA,EAzEyBA,KACvB,MAAMC,GAAWC,EAAAA,EAAAA,OACX,MAAEC,IAAUC,EAAAA,EAAAA,KACZC,GAASC,EAAAA,EAAAA,MAAcD,QACtBE,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,MAsDnC,OApDAC,EAAAA,EAAAA,WAAU,KACR,MAAMC,EAAS,IAAIC,gBAAgBP,GAC7BQ,EAAQF,EAAOG,IAAI,SACnBC,EAAOJ,EAAOG,IAAI,QAExB,IAAKD,IAAUE,EAMb,OALAP,EAAS,CACPQ,QAAS,qCACTC,KAAM,eAERC,WAAW,IAAMjB,EAAS,UAAW,MAKvC,MAAMkB,EAAW,CACfC,IAAKT,EAAOG,IAAI,QAAU,GAC1BC,OACAM,KAAMV,EAAOG,IAAI,SAAW,GAC5BQ,MAAOX,EAAOG,IAAI,UAAY,GAC9BS,MAAOZ,EAAOG,IAAI,UAAY,GAC9BU,SAAUb,EAAOG,IAAI,aAAe,GACpCW,WAAYd,EAAOG,IAAI,eAAiB,GACxCY,UAAWf,EAAOG,IAAI,cAAgB,GACtCa,SAAUhB,EAAOG,IAAI,aAAe,GACpCc,OAAQjB,EAAOG,IAAI,WAAa,GAChCe,QAAmC,SAA1BlB,EAAOG,IAAI,WACpBgB,SAAqC,UAA3BnB,EAAOG,IAAI,aAIjBiB,EAAW,CACfC,UAAWnB,EACXoB,SAAUd,EACVN,QACAqB,YAAaC,KAAKC,MAAQ,MAE5BC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUT,IAGhD5B,EAAMgB,EAAUN,EAAO,MAEvBL,EAAS,CAAEQ,QAAS,0BAA2BC,KAAM,SAGrD,MAAMwB,EACK,YAAT1B,EAAqB,qBAAuB,sBACxC2B,EAAUxB,WAAW,IAAMjB,EAASwC,GAAc,KAExD,MAAO,IAAME,aAAaD,IACzB,CAACrC,EAAQF,EAAOF,KAGjB2C,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gDAA+CC,SAC3DvC,GACCqC,EAAAA,EAAAA,KAACG,EAAAA,EAAK,CACJ/B,QAAST,EAAMS,QACfC,KAAMV,EAAMU,KACZ+B,QAASA,IAAMxC,EAAS,SAG1BoC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeC,SAAC,oB","sources":["pages/auth/OAuthSuccessPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport Toast from \"../../components/common/Toast\";\n\nconst OAuthSuccessPage = () => {\n  const navigate = useNavigate();\n  const { login } = useAuth();\n  const search = useLocation().search;\n  const [toast, setToast] = useState(null);\n\n  useEffect(() => {\n    const params = new URLSearchParams(search);\n    const token = params.get(\"token\");\n    const role = params.get(\"role\");\n\n    if (!token || !role) {\n      setToast({\n        message: \"OAuth login failed. Redirecting...\",\n        type: \"error\",\n      });\n      setTimeout(() => navigate(\"/login\"), 1500);\n      return;\n    }\n\n    // Extract user info from query params with fallback\n    const userData = {\n      _id: params.get(\"_id\") || \"\",\n      role,\n      name: params.get(\"name\") || \"\",\n      email: params.get(\"email\") || \"\",\n      photo: params.get(\"photo\") || \"\",\n      provider: params.get(\"provider\") || \"\",\n      providerId: params.get(\"providerId\") || \"\",\n      firstName: params.get(\"firstName\") || \"\",\n      lastName: params.get(\"lastName\") || \"\",\n      locale: params.get(\"locale\") || \"\",\n      isLogin: params.get(\"isLogin\") === \"true\",\n      isActive: params.get(\"isActive\") !== \"false\", // default true\n    };\n\n    // Store in localStorage with token expiry\n    const authData = {\n      authToken: token,\n      authUser: userData,\n      token,\n      tokenExpiry: Date.now() + 3600 * 1000, // 1 hour\n    };\n    localStorage.setItem(\"authData\", JSON.stringify(authData));\n\n    // Update context\n    login(userData, token, 3600);\n\n    setToast({ message: \"Logged in successfully!\", type: \"info\" });\n\n    // Redirect after short delay\n    const redirectUrl =\n      role === \"shipper\" ? \"/shipper/dashboard\" : \"/customer/dashboard\";\n    const timeout = setTimeout(() => navigate(redirectUrl), 1000);\n\n    return () => clearTimeout(timeout);\n  }, [search, login, navigate]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center\">\n      {toast ? (\n        <Toast\n          message={toast.message}\n          type={toast.type}\n          onClose={() => setToast(null)}\n        />\n      ) : (\n        <p className=\"text-gray-600\">Logging in...</p>\n      )}\n    </div>\n  );\n};\n\nexport default OAuthSuccessPage;\n"],"names":["OAuthSuccessPage","navigate","useNavigate","login","useAuth","search","useLocation","toast","setToast","useState","useEffect","params","URLSearchParams","token","get","role","message","type","setTimeout","userData","_id","name","email","photo","provider","providerId","firstName","lastName","locale","isLogin","isActive","authData","authToken","authUser","tokenExpiry","Date","now","localStorage","setItem","JSON","stringify","redirectUrl","timeout","clearTimeout","_jsx","className","children","Toast","onClose"],"sourceRoot":""}